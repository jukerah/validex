import { schema } from '../../../../../index'

describe('Validator Array Method', () => {
  it('Should be able to validate the array method and return true if array is valid', () => {
    const stringArray = schema().array().string().validate(['string'])
    const emailArray = schema().array().string().email().validate(['any_email@email.com'])
    const UUIDArray = schema().array().string().UUID().validate(['550e8400-e29b-41d4-a716-446655440000'])
    const maxLengthArray = schema().array().string().maxLength(5).validate(['12345'])
    const minLengthArray = schema().array().string().minLength(5).validate(['12345'])
    const timeHHMMArray = schema().array().string().time('HH:MM').validate(['01:01'])
    const minWordArray = schema().array().string().minWord(2).validate(['one two'])
    const numberArray = schema().array().number().validate([1])
    const floatArray = schema().array().number().float().validate([1.5])
    const integerArray = schema().array().number().integer().validate([2])
    const booleanArray = schema().array().boolean().validate([true])
    const objectArray = schema().array().object({ key: schema().string() }).validate([{ key: 'string' }])
    const defaultDateArray = schema().array().date().validate([new Date()])
    const dateArray = schema().array().date('ISO8601').validate([new Date()])
    const minDateArray = schema().array().date().min(new Date('2000/01/01')).validate([new Date('2000/01/01')])
    const maxDateArray = schema().array().date().max(new Date('2000/01/01')).validate([new Date('2000/01/01')])

    expect(stringArray).toBeTruthy()
    expect(emailArray).toBeTruthy()
    expect(UUIDArray).toBeTruthy()
    expect(maxLengthArray).toBeTruthy()
    expect(minLengthArray).toBeTruthy()
    expect(minWordArray).toBeTruthy()
    expect(timeHHMMArray).toBeTruthy()
    expect(numberArray).toBeTruthy()
    expect(floatArray).toBeTruthy()
    expect(integerArray).toBeTruthy()
    expect(booleanArray).toBeTruthy()
    expect(objectArray).toBeTruthy()
    expect(defaultDateArray).toBeTruthy()
    expect(dateArray).toBeTruthy()
    expect(minDateArray).toBeTruthy()
    expect(maxDateArray).toBeTruthy()
  })

  it('Should be able to validate the array method and return false if array is invalid', () => {
    const notIsArray = schema().array().string().validate(null)
    const stringArray = schema().array().string().validate([null])
    const emailArray = schema().array().string().email().validate(['any_email@mail'])
    const UUIDArray = schema().array().string().UUID().validate(['invalid_uuid'])
    const maxLengthArray = schema().array().string().maxLength(5).validate(['123456'])
    const minLengthArray = schema().array().string().minLength(5).validate(['1234'])
    const timeHHMMArray = schema().array().string().time('HH:MM').validate(['111:11'])
    const minWordArray = schema().array().string().minWord(2).validate(['one'])
    const numberArray = schema().array().number().validate([null])
    const floatArray = schema().array().number().float().validate([1])
    const integerArray = schema().array().number().integer().validate([1.5])
    const booleanArray = schema().array().boolean().validate([null])
    const objectArray = schema().array().object({ key: schema().string() }).validate([null])
    const dateArray = schema().array().date().validate([null])
    const minDateArray = schema().array().date().min(new Date()).validate([null])
    const maxDateArray = schema().array().date().max(new Date()).validate([null])

    expect(notIsArray).toBeFalsy()
    expect(stringArray).toBeFalsy()
    expect(emailArray).toBeFalsy()
    expect(UUIDArray).toBeFalsy()
    expect(maxLengthArray).toBeFalsy()
    expect(minLengthArray).toBeFalsy()
    expect(minWordArray).toBeFalsy()
    expect(timeHHMMArray).toBeFalsy()
    expect(numberArray).toBeFalsy()
    expect(floatArray).toBeFalsy()
    expect(integerArray).toBeFalsy()
    expect(booleanArray).toBeFalsy()
    expect(objectArray).toBeFalsy()
    expect(dateArray).toBeFalsy()
    expect(minDateArray).toBeFalsy()
    expect(maxDateArray).toBeFalsy()
  })
})
